.include "include/cpu.i65"
.include "include/syscall.i65"
.include "include/syszp.i65"
.include "include/version.i65"
.p816

.segment "SYSINIT"

	jmp reset
.export version
version:
	.byte _minor_version
	.byte _major_version
	.byte "X65OS ROM BIOS "
	.byte _git_version, 13, 10
	.asciiz "Copyright (c) 2020 Calle Englund"

.export reset
reset:
	sei
	; Native mode
	clc
	xce
	; 16-bit registers
	rep #CPU_M|CPU_X
	.a16
	.i16
	; Reset direct page to page 0
	lda #$0000
	tcd
	; Reset stack pointer to page 0
	lda #$00ff
	tcs

; Clear syszp and systk pages
.scope clearlowpages
	rep #CPU_M|CPU_X
	.a16
	.i16
	ldx #$01fe
loop:
	stz $00,x
	dex
	dex
	bpl loop
.endscope

.scope idle

.segment "CODE"

	pea task
	sys async, 1
	; Should never return, unless something went really wrong
	brk

; The IDLE task
.segment "RODATA"

task:
	.asciiz "IDLE TASK  "	; Task name
	.byte 0					; # of stack pages
	.byte $00				; starting data bank
	.word $0000				; starting Y
	.word $0000				; starting X
	.word $0000				; starting C
	.byte %00000000			; starting P
	.faraddr start			; starting PB:PC

.segment "CODE"

start:
	rep #CPU_M|CPU_X|CPU_I
	.a16
	.i16
loop:
	stp				; Should be wai, but we have no interrupt sources yet
	bra loop

.endscope
